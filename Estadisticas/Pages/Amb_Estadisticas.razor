@page "/Amb_Estadisticas"

@using System.IO;
@using Estadisticas.Model;
@using Estadisticas.Dao;
@using LoreSoft.Blazor.Controls;
@using BlazorDataGrid;
@using Estadisticas.Data;
@using BlazorDateRangePicker

@inject Estadisticas.Data.PdfService pdfService
@inject Microsoft.JSInterop.IJSRuntime JS

<h3>Estadisticas Ambulatorio</h3>

<EditForm Model="@relacionDerivacionTxt">
    <table>
        <tr>
            <td>
                <DateRangePicker ShowOnlyOneCalendar="true" MinDate="DateTimeOffset.Now.AddMonths(-3)" MaxDate="DateTimeOffset.Now" OnRangeSelect="OnRangeSelect" />
            </td>
            <td>
                <Typeahead SearchMethod=@SearchMedico Items=@list_Med @bind-Values=@list_selection_med Placeholder="Medico Derivador" style="width:300px">
                    <SelectedTemplate Context="medico">
                        @medico.Medico
                    </SelectedTemplate>
                    <ResultTemplate Context="medico">
                        @medico.Medico
                    </ResultTemplate>
                </Typeahead>
            </td>
            <td>
                <Typeahead SearchMethod=@SearchEspeDerivadora Items=@list_Esp @bind-Values=@list_selection_derivador Placeholder="Especialidad Derivador" style="width:300px">
                    <SelectedTemplate Context="especialidad_derivadora">
                        @especialidad_derivadora.Especialidad
                    </SelectedTemplate>
                    <ResultTemplate Context="especialidad_derivadora">
                        @especialidad_derivadora.Especialidad
                    </ResultTemplate>
                </Typeahead>
            </td>
            <td>
                <Typeahead SearchMethod=@SearchEspeEfectora Items=@list_Esp_Efec @bind-Values=@list_selection_efector Placeholder="Especialidad Efector" style="width:300px">
                    <SelectedTemplate Context="especialidad_efectora">
                        @especialidad_efectora.Especialidad_Efector
                    </SelectedTemplate>
                    <ResultTemplate Context="especialidad_efectora">
                        @especialidad_efectora.Especialidad_Efector
                    </ResultTemplate>
                </Typeahead>
            </td>
        </tr>
    </table>
    <button type="submit" class="btn-primary" @onclick="procesar">Listar</button>
</EditForm>

<div class="list-group-item-dark" style="font-size:12px">
    @if (list_estadisticas == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <BlazorDataGrid Items="@list_estadisticas" PageSize="5" ShowTotalResult="true" TheadClass="thead-dark" Translation="@translate" ShowPageSelector="true" PageSelector="@PageSelector">
            <BlazorDataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="fecha" Filter="true"><strong>Fecha</strong></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="paciente" DisplayColumnName="Paciente" Filter="true"></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="cobertura" DisplayColumnName="Cobertura"></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="codigo" DisplayColumnName="Codigo"></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="descripcion" DisplayColumnName="Descripcion"></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="cantidad" DisplayColumnName="Cantidad"></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="efector" DisplayColumnName="Efector"></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="especialidad" DisplayColumnName="Especialidad"></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="derivador" DisplayColumnName="Derivador"></DataGridColumn>
                <DataGridColumn Items="@list_estadisticas" ColumnName="grupo" DisplayColumnName="Grupo"></DataGridColumn>
            </BlazorDataGridColumn>
            <GridRow>
                <td>@context.fecha.ToShortDateString()</td>
                <td>@context.paciente</td>
                <td>@context.cobertura</td>
                <td>@context.codigo</td>
                <td>@context.descripcion</td>
                <td>@context.cantidad</td>
                <td>@context.efector</td>
                <td>@context.especialidad</td>
                <td>@context.derivador</td>
                <td>@context.grupo</td>
            </GridRow>
        </BlazorDataGrid>
        <button type="submit" class="btn-primary" @onclick="export">Exportar</button>
    }
</div>
@if (resumenxcobertura_list == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ResumenAmbXCobertura_Page resumen_list="@resumenxcobertura_list" Esp_resumen="@list_selection_derivador[0].Especialidad"></ResumenAmbXCobertura_Page>
}
@if (resumenxmedico_list == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ResumenAmbXMedico_Page resumen_list="@resumenxmedico_list" reusmen_medico="Medicos"></ResumenAmbXMedico_Page>
}

@code {
    DateTime start_date = new DateTime();
    DateTime end_date = new DateTime();
    List<ResumenAmbClasscs> resumenxcobertura_list;
    List<ResumenAmbXMedico> resumenxmedico_list;
    RelacionDerivacionTextClass relacionDerivacionTxt = new RelacionDerivacionTextClass();
    DaoMedicosDerivadores daoMedicoDerivador = new DaoMedicosDerivadores();
    DaoEspecialidadesDerivadores daoEspecialidadesDerivadores = new DaoEspecialidadesDerivadores();
    DaoEspecialidadesEfector daoEspecialidadesEfector = new DaoEspecialidadesEfector();
    MedicosDerivadoresClass[] list_Med;
    EspecialidadesDerivadoresClass[] list_Esp;
    EspecialidadesEfectoresClass[] list_Esp_Efec;
    List<AmbListClass> list_estadisticas;
    MedicosDerivadoresClass medico = new MedicosDerivadoresClass();
    EspecialidadesDerivadoresClass especialidad_derivadora = new EspecialidadesDerivadoresClass();
    EspecialidadesEfectoresClass especialidad_efectora = new EspecialidadesEfectoresClass();
    IList<MedicosDerivadoresClass> list_selection_med;
    IList<EspecialidadesDerivadoresClass> list_selection_derivador;
    IList<EspecialidadesEfectoresClass> list_selection_efector;

    protected override async Task OnInitializedAsync()
    {
        list_Med = await daoMedicoDerivador.GetMedicosAsync();
        list_Esp = await daoEspecialidadesDerivadores.GetEspecialidadAsync();
        list_Esp_Efec = await daoEspecialidadesEfector.GetEspecialidadEfectorAsync();
    }

    public void OnRangeSelect(DateRange range)
    {
        start_date = range.Start.DateTime;
        end_date = range.End.DateTime;
    }

    void procesar()
    {
        list_estadisticas = new List<AmbListClass>();
        DaoAmbEstadisticas daoAmbEstadisticas = new DaoAmbEstadisticas();
        list_estadisticas = daoAmbEstadisticas.Estadisticas_Ambulatoria(list_selection_med, list_selection_derivador, list_selection_efector, start_date, end_date);
        resumenxcobertura_list = new List<ResumenAmbClasscs>();

        var resume_list = list_estadisticas.GroupBy(a => a.cobertura)
                                 .Select(codigoGroup => new ResumenAmbClasscs
                                 {
                                     Cobertura = codigoGroup.Key,
                                     Codigo = codigoGroup.GroupBy(a => a.codigo)
                                                         .Select(cantGroup => new ResumenCodicoAmbClass
                                                         {
                                                             Codigo = cantGroup.Key,
                                                             Descripcion = cantGroup.First().descripcion,
                                                             Cantidad = cantGroup.Sum(x => x.cantidad)
                                                         }).ToList()
                                 });

        var resumexmedico_list = list_estadisticas.GroupBy(a => a.derivador)
                                 .Select(codigoGroup => new ResumenAmbXMedico
                                 {
                                     Medico = codigoGroup.Key,
                                     Codigo = codigoGroup.GroupBy(a => a.codigo)
                                                         .Select(cantGroup => new ResumenCodicoAmbXMedico
                                                         {
                                                             Codigo = cantGroup.Key,
                                                             Descripcion = cantGroup.First().descripcion,
                                                             Cantidad = cantGroup.Sum(x => x.cantidad)
                                                         }).ToList()
                                 });
        resumenxmedico_list = resumexmedico_list.ToList();
        resumenxcobertura_list = resume_list.ToList();
    }

    protected async Task export()
    {
        List<AmbListExportrClass> listEsport = list_estadisticas.Select(x => new AmbListExportrClass
        {
            Fecha = x.fecha.ToShortDateString(),
            Cobertura = x.cobertura,
            Paciente = x.paciente,
            Especialidad = x.especialidad,
            Codigo = x.codigo,
            Descripcion = x.descripcion,
            Cantidad = x.cantidad,
            Efector = x.efector,
            Derivador = x.derivador,
            Matricula = x.derivador_matricula,
            Grupo = x.grupo
        }).ToList();
        using (MemoryStream excelStream = pdfService.CreatePdf(listEsport))
        {
            await JS.SaveAs("estadisticas_amb.pdf", excelStream.ToArray());
        }
    }

    Task<IEnumerable<MedicosDerivadoresClass>> SearchMedico(string searchText)
    {
        List<MedicosDerivadoresClass> result = list_Med.Where(x => x.Medico.ToLower().Contains(searchText.ToLower())).ToList();
        return Task.FromResult<IEnumerable<MedicosDerivadoresClass>>(result);
    }

    Task<IEnumerable<EspecialidadesDerivadoresClass>> SearchEspeDerivadora(string searchText)
    {
        List<EspecialidadesDerivadoresClass> result = list_Esp.Where(x => x.Especialidad.ToLower().Contains(searchText.ToLower())).ToList();
        return Task.FromResult<IEnumerable<EspecialidadesDerivadoresClass>>(result);
    }

    Task<IEnumerable<EspecialidadesEfectoresClass>> SearchEspeEfectora(string searchText)
    {
        List<EspecialidadesEfectoresClass> result = list_Esp_Efec.Where(x => x.Especialidad_Efector.ToLower().Contains(searchText.ToLower())).ToList();
        return Task.FromResult<IEnumerable<EspecialidadesEfectoresClass>>(result);
    }

    Dictionary<string, string> translate = new Dictionary<string, string>
{
        {"next", "Siguiente" },
        {"previous", "Anterior" },
        {"pages", "Pagina __curpage__ de __totalpages__" },
        {"totalresult", "__totalcount__ Registros" },
        {"totalresultplural", "__totalcount__ Registros"},
        {"filteredresults", "__filteredcount__ resultados de __totalcount__ Registros" },
        {"filteredresultsplural", "__filteredcount__ resultados de __totalcount__ Registros"  },
        {"selector", "Registros por Pagina:"}
    };

    Dictionary<string, int> PageSelector = new Dictionary<string, int>
{
        {"5", 5 },
        {"10", 10 },
        {"20", 20 },
        {"30", 30 },
        {"All", 0 }
    };
}
